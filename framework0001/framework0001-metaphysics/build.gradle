apply plugin: 'application'
apply plugin: 'maven-publish'

sourceCompatibility = 17
mainClassName = 'pama1234.metaphysics.test.MainTest'
eclipse.project.name = appName + '-metaphysics'

dependencies {
  api project(':server-framework')

  // 编写食谱
  // import Rewrite's bill of materials.
  implementation(platform("org.openrewrite.recipe:rewrite-recipe-bom:2.3.1"))

  // rewrite-java dependencies only necessary for Java Recipe development
  implementation("org.openrewrite:rewrite-java")

  // You only need the version that corresponds to your current
  // Java version. It is fine to add all of them, though, as
  // they can coexist on a classpath.
  runtimeOnly("org.openrewrite:rewrite-java-8")
  runtimeOnly("org.openrewrite:rewrite-java-11")
  runtimeOnly("org.openrewrite:rewrite-java-17")

  // rewrite-maven dependency only necessary for Maven Recipe development
  implementation("org.openrewrite:rewrite-maven")

  // rewrite-yaml dependency only necessary for Yaml Recipe development
  implementation("org.openrewrite:rewrite-yaml")

  // rewrite-properties dependency only necessary for Properties Recipe development
  implementation("org.openrewrite:rewrite-properties")

  // rewrite-xml dependency only necessary for XML Recipe development
  implementation("org.openrewrite:rewrite-xml")

  // lombok is optional, but recommended for authoring recipes
  annotationProcessor("org.projectlombok:lombok:latest.release")

  // For authoring tests for any kind of Recipe
  testImplementation("org.openrewrite:rewrite-test")
  testImplementation("org.junit.jupiter:junit-jupiter-api:latest.release")
  testImplementation("org.junit.jupiter:junit-jupiter-params:latest.release")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:latest.release")

  // 测试食谱
  implementation(platform("org.openrewrite.recipe:rewrite-recipe-bom:2.3.1"))

  testImplementation("org.openrewrite:rewrite-test")
  testImplementation("org.junit.jupiter:junit-jupiter-api:latest.release")

  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:latest.release")

  // Optional dependency to make SLF4J logging work.
  // Any SLF4J implementation can work here.
  // Also requires a logback.xml file like:
  // https://gist.github.com/mike-solomon/dabcb2cbd9bca33e4ffeee8fc1c09454
  testRuntimeOnly("ch.qos.logback:logback-classic:1.2.+")

  // Optional dependency on assertJ to provide fluent assertions.
  testImplementation("org.assertj:assertj-core:latest.release")
}

jar {
  archiveBaseName.set(eclipse.project.name)
  // the duplicatesStrategy matters starting in Gradle 7.0; this setting works.
  duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
  dependsOn configurations.runtimeClasspath
  from {
    configurations.runtimeClasspath.collect {
      it.isDirectory() ? it : zipTree(it)
    }
  }
  // these "exclude" lines remove some unnecessary duplicate files in the output JAR.
  exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
  dependencies {
    exclude('META-INF/INDEX.LIST', 'META-INF/maven/**')
  }
  // setting the manifest makes the JAR runnable.
  manifest {
    attributes 'Main-Class': project.mainClassName
  }
  // this last step may help on some OSes that need extra instruction to make runnable JARs.
  doLast {
    file(archiveFile).setExecutable(true, false)
  }
}

// Equivalent to the jar task; here for compatibility with gdx-setup.
task dist(dependsOn: [jar]) { }

publishing {
  publications {
    maven(MavenPublication) {
      groupId = 'pama1234'
      artifactId = 'framework-metaphysics'
      version = "$pama1234PublishVersion"
      from components.java

      pom {
        name = 'pama1234-framework-metaphysics'
        description = 'refactoring framework for java'
        url = 'https://github.com/pama1234/just-some-other-libgdx-game'
        scm {
          url = 'https://github.com/pama1234/just-some-other-libgdx-game'
        }
      }
    }
  }
}