apply plugin: "com.android.library"
apply plugin: 'maven-publish'

android {
  namespace 'pama1234.util'

  compileSdkVersion project.properties.compileSdkVersion.toInteger()
  signingConfigs {
    release {
      // storeFile file('sign.jks')
      // storePassword ''
      // keyAlias 'xxx'
      // keyPassword ''
    }
  }
  sourceSets {
    main {
      manifest.srcFile 'AndroidManifest.xml'
      java.srcDirs = ['src/main/java']
      aidl.srcDirs = ['src/main/java']
      renderscript.srcDirs = ['src/main/java']
      res.srcDirs = ['res']
      assets.srcDirs = ['../../assets' , '../assets']
      jniLibs.srcDirs = ['libs']
    }
  }
  defaultConfig {
    // applicationId 'pama1234.gdx.util.android.dex' NOP
    minSdkVersion project.properties.minSdkVersion.toInteger()
    targetSdkVersion project.properties.targetSdkVersion.toInteger()
    versionCode 1
    versionName "1.0"
    multiDexEnabled true
  }
  compileOptions {
    encoding = 'UTF-8'
    sourceCompatibility "17"
    targetCompatibility "17"
    coreLibraryDesugaringEnabled true
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

      signingConfig signingConfigs.release
    }
  }
  publishing {
    singleVariant('release') {
        // withSourcesJar()
    }
  }
}

def Properties props = new Properties()
def propFile = rootProject.file('/doc/signing/signing.properties')
if (propFile.canRead()){
  props.load(new FileInputStream(propFile))

  if (props!=null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
      props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {

    android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
    android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
    android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
    android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
  } else {
    android.buildTypes.release.signingConfig = null
  }
}else {
  android.buildTypes.release.signingConfig = null
}

repositories {
  // needed for AAPT2, may be needed for other tools
  mavenCentral()
  maven { url 'https://maven.scijava.org/content/repositories/public/' }
  maven { url 'https://jitpack.io' }
  google()
}

dependencies {
  coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$androidDesugarVersion"

  implementation project(':server-framework')

  // api "com.android.tools.build:builder:$androidPluginVersion"
  // api 'com.github.ThexXTURBOXx:dex2jar:v59'
}

eclipse.project.name = appName + '-android-dex'

// Because the components are created only during the afterEvaluate phase, you must
// configure your publications using the afterEvaluate() lifecycle method.
afterEvaluate {
  publishing {
    publications {
      // Creates a Maven publication called "release".
      release(MavenPublication) {

        // You can then customize attributes of the publication as shown below.
        groupId = 'pama1234'
        artifactId = 'android-dex'
        version = "$pama1234PublishVersion"
        // Applies the component for the release build variant.
        from components.release

        pom {
          name = 'pama1234-android-dex'
          description = 'some android dex framework'
          url = 'https://github.com/pama1234/just-some-other-libgdx-game'
          scm {
            url = 'https://github.com/pama1234/just-some-other-libgdx-game'
          }
        }
      }
      // // Creates a Maven publication called “debug”.
      // debug(MavenPublication) {
      //   // Applies the component for the debug build variant.
      //   from components.debug

      //   groupId = 'com.example.MyLibrary'
      //   artifactId = 'final-debug'
      //   version = '1.0'
      // }
    }
  }
}